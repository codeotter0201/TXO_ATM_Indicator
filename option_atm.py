# -*- coding: utf-8 -*-
"""option_fair_price.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xlmaatz9oPivg1axK1VTcfmYm4rpaOTf
"""

from bs4 import BeautifulSoup
import requests
import pandas as pd
import matplotlib.pyplot as plt
import pandas_ta as ta

def get_settlement_dates(start_year):
    data = dict(start_year=start_year, start_month='01', end_year='2030', end_month='12')
    r = requests.post('https://www.taifex.com.tw/cht/5/futIndxFSP', data=data)
    s = BeautifulSoup(r.text, 'html.parser')
    df = {}
    for row in s.find_all('tr',{'bgcolor':'#FFFFFF', 'class':'12bk'}):#.find_all('td', dict(align='middle'))
        tse = row.find('td', dict(align='right', width='10%')).get_text(strip=True)
        if '-' == tse:
            continue
        date = row.find('td', dict(align='middle', width='14%')).get_text(strip=True).replace('/', '-')
        month = row.find('td', dict(align='middle', width='10%')).get_text(strip=True)
        df[date] = month
    return df

def get_opt_data(date):
  url = "https://api.finmindtrade.com/api/v4/data"
  parameter = {
      "dataset": "TaiwanOptionDaily",
      "data_id":"TXO",
      "start_date": date,
      "token": "", # 參考登入，獲取金鑰
  }
  data = requests.get(url, params=parameter)
  data = data.json()
  return pd.DataFrame(data['data'])

def get_fut_data(date):
  url = "https://api.finmindtrade.com/api/v4/data"
  parameter = {
      "dataset": "TaiwanFuturesDaily",
      "data_id":"TX",
      "start_date": date,
      "token": "", # 參考登入，獲取金鑰
  }
  data = requests.get(url, params=parameter)
  data = data.json()
  return pd.DataFrame(data['data'])

def select_fut_current_contract_data(df):
  new_df = pd.DataFrame()
  for d in df.date.unique():
    new_df = pd.concat([new_df, df.query('date == @d').sort_values('volume').iloc[-1:]], axis=0)
  c = new_df.contract_date.str.len()
  return new_df.query('(@c == 6) & (trading_session == "position")')

def get_current_fut_data(fut_data, settlement_days):
  temp_df = pd.DataFrame()
  c = fut_data.contract_date.str.len()
  df = fut_data.query('(@c == 6) & (trading_session == "position")')
  fut_settlement_date = [k for k, v in settlement_days.items() if 'W' not in v]
  for d in df.date.unique():
    td_contract = df.loc[df.date==d].contract_date.unique()
    cond1 = df.date == d
    cond2 = df.contract_date == td_contract[0]
    cond3 = df.contract_date == td_contract[1]
    if d in fut_settlement_date:
      temp_df = pd.concat([temp_df, df.loc[cond1&cond3]], axis=0)
    else:
      temp_df = pd.concat([temp_df, df.loc[cond1&cond2]], axis=0)
  return temp_df

if __name__ == '__main__':
  """### download data"""

  print('processing data...!')
  settlement_days = get_settlement_dates('2021')
  opt_data = get_opt_data('2021-01-01')
  fut_data = get_fut_data('2021-01-01')

  """### data processing"""

  fut_daily_close = get_current_fut_data(fut_data, settlement_days)
  fut_daily_close['atr'] = ta.atr(fut_daily_close['max'], fut_daily_close['min'], fut_daily_close.close, 14)

  temp_df = {
      'date':[],
      'contract':[],
      'strike_price':[],
      'TXO_ATM':[],
  }

  opt_data['fair_price'] = opt_data.strike_price

  for i, v in fut_daily_close.iterrows():
    current_contracts = [i for i in opt_data.loc[opt_data.date == v['date']].contract_date.unique()]
    if v['date'] in settlement_days:
      contract = current_contracts[1]
    else:
      contract = current_contracts[0]

    cond1 = contract == opt_data.contract_date
    cond2 = v['date'] == opt_data.date
    cond3 = v['trading_session'] == 'position'

    temp = opt_data.loc[(opt_data[cond1&cond2&cond3].fair_price - v['close']).abs().sort_values().index[:2]]

    temp_df['date'].append(v['date'])
    temp_df['contract'].append(contract)
    temp_df['strike_price'].append(temp.strike_price.iloc[0])
    temp_df['TXO_ATM'].append(temp.close.sum())

  option_fair_price = pd.DataFrame(temp_df)

  """### add indicators"""

  option_fair_price['day'] = pd.to_datetime(option_fair_price.date).dt.day_name()
  option_fair_price['close'] = fut_daily_close.set_index('date').loc[option_fair_price.date].close.to_list()
  option_fair_price['atr'] = fut_daily_close.set_index('date').loc[option_fair_price.date]['atr'].to_list()

  option_fair_price.to_csv('TXO_ATM.csv')